/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *     * Neither the name of Code Aurora Forum, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.android.server;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.ExtraLinkCapabilities;
import android.net.LinkCapabilities;
import android.net.LinkProperties;
import android.os.IBinder;
import android.os.RemoteException;

/**
 * QosManager stub
 */
public class QosManager {
    private static final String LOG_TAG = "QoSManager";

    private Context mContext;
    private ConnectivityService mService;

    /**
     * Constructor
     *
     * @param context
     * @param connectivityService
     */
    public QosManager(Context context, ConnectivityService connectivityService) {
        mContext = context;
        mService = connectivityService;
    }

    /**
     * Checks if the link request by user is available and notify accordingly
     *
     * @param id : id to use to tie the request to a specific application. This
     *            id is generated by CNE service and passed it to
     *            {@code QoSManager} so it can return this id to the socket
     *            class. This id is used by the socket class for all future
     *            operations that request to modify the link
     * @param cap
     * @param remoteIPAddress
     * @param binder
     * @return id
     */
    public int requestLink(int id, LinkCapabilities cap, String remoteIPAddress, IBinder binder)
            throws RemoteException {

        return id;
    }

    /**
     * @hide Start QoS transaction request for the specified socket id and port
     * @param id
     * @param aport
     * @param localAddress
     * @return true if request for qos is initiates successfully, false
     *         otherwise
     */
    public boolean requestQoS(int id, int port, String localAddress) {
        return false;
    }

    /**
     * This method suspends the QoS if available for the specified socket id
     *
     * @param id
     * @return
     */
    public boolean suspendQoS(int id) {
        return false;
    }

    /**
     * This method resume the QoS if suspended for the specified socket id
     *
     * @param id
     * @return
     */
    public boolean resumeQoS(int id) {
        return false;
    }

    /**
     * @hide
     * Stop QoS transaction for the specified socket id
     *
     * @param id
     * @return true on success, false on error
     */
    public boolean releaseQos(int id) {
        return false;
    }

    /** @hide
     * Returns current state for Quality of Service for this socket
     *
     * @param id
     * @return
     */
    public String getQosState(int id) {
        return null;
    }

    /** @hide
     * Minimum available reverse link (upload) bandwidth for the socket.
     * This value is in kilobits per second (kbps).
     *
     * @param id
     * @return
     */
    public String getMinAvailableForwardBandwidth(int id) {
        return null;
    }

    /** @hide
     * Maximum available forward link (download) bandwidth for the socket.
     * This value is in kilobits per second (kbps).
     *
     * @param id
     * @return
     */
    public String getMaxAvailableForwardBandwidth(int id) {
        return null;
    }

    /** @hide
     * Minimum available reverse link (upload) bandwidth for the socket.
     * This value is in kilobits per second (kbps).
     *
     * @param id
     * @return
     */
    public String getMinAvailableReverseBandwidth(int id) {
        return null;
    }

    /** @hide
     * Maximum available reverse link (upload) bandwidth for the socket.
     * This value is in kilobits per second (kbps).
     *
     * @param id
     * @return
     */
    public String getMaxAvailableReverseBandwidth(int id) {
        return null;
    }

    /** @hide
     * Current estimated downlink latency of the socket, in milliseconds.
     *
     * @param id
     * @return
     */
    public String getCurrentFwdLatency(int id) {
        return null;
    }

    /** @hide
     * Current estimated uplink latency of the socket, in milliseconds.
     *
     * @param id
     * @return
     */
    public String getCurrentRevLatency(int id) {
        return null;
    }
}
